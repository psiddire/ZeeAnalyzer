// system include files
#include <memory>
#include <iostream>
#include <string>
#include <vector>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/Common/interface/ValueMap.h"

#include "DataFormats/MuonReco/interface/MuonFwd.h"
#include "DataFormats/MuonReco/interface/Muon.h"
#include "DataFormats/MuonReco/interface/MuonCosmicCompatibility.h"

class RhoProducer : public edm::EDProducer {
public:
  explicit RhoProducer(const edm::ParameterSet&);
  ~RhoProducer();

private:
  virtual void beginJob() ;
  virtual void produce(edm::Event&, const edm::EventSetup&);
  virtual void endJob() ;

  // ----------member data --------------------------
  edm::InputTag src_;
  std::string result_;
};

RhoProducer::RhoProducer(const edm::ParameterSet& iConfig)
{
  src_= iConfig.getParameter<edm::InputTag>("src");
  result_ = iConfig.getParameter<std::string>("result");
  produces<edm::ValueMap<float> >().setBranchAlias("Rho");
}


RhoProducer::~RhoProducer()
{

}

// ------------ method called to produce the data  ------------
void
RhoProducer::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using namespace edm;
  using namespace reco;
  Handle<edm::ValueMap< double > > RhoMap;
  iEvent.getByLabel( src_, RhoMap );
  edm::Handle<pat::Electron> electrons;
  iEvent.getByLabel("electrons",electrons);
  std::vector<float> values;
  values.reserve(electrons->size());

  unsigned int electronIdx = 0;
  for(pat::Electron::const_iterator el = electrons->begin();
      el != electrons->end(); ++el) {
    pat::ElectronRef electronRef(electrons, electronIdx);
    pat::ElectronRho electronRho = (*RhoMap)[electronRef];

    if(result_ == "Rho") values.push_back(electronRho.Rho);
    //if(result_ == "timeCompatibility") values.push_back(muonCosmicCompatibility.timeCompatibility);
    //if(result_ == "backToBackCompatibility") values.push_back(muonCosmicCompatibility.backToBackCompatibility);
    //if(result_ == "overlapCompatibility") values.push_back(muonCosmicCompatibility.overlapCompatibility);
    ++electronIdx;
  }

  std::auto_ptr<edm::ValueMap<float> > out(new edm::ValueMap<float>());
  edm::ValueMap<float>::Filler filler(*out);
  filler.insert(electrons, values.begin(), values.end());
  filler.fill();

  // put value map into event
  iEvent.put(out);
}

// ------------ method called once each job just before starting event loop  ------------
void
RhoProducer::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void
RhoProducer::endJob() {
}

//define this as a plug-in
DEFINE_FWK_MODULE(RhoProducer);
